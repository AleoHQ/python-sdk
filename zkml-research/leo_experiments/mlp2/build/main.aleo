program mlp2.aleo;



closure relu:
    input r0 as field;
    cast r0 into r1 as i32;
    lt r1 0i32 into r2;
    cast r1 into r3 as field;
    ternary r2 0field r3 into r4;
    output r4 as field;


function main:
    input r0 as i128.private;
    input r1 as i128.private;
    input r2 as i128.private;
    input r3 as i128.private;
    input r4 as i128.private;
    cast r0 into r5 as field;
    cast r1 into r6 as field;
    cast r2 into r7 as field;
    cast r3 into r8 as field;
    cast r4 into r9 as field;
    cast 10i128 into r10 as field;
    mul r10 r5 into r11;
    cast 128i128 into r12 as field;
    div r11 r12 into r13;
    cast -16i128 into r14 as field;
    mul r14 r6 into r15;
    cast 128i128 into r16 as field;
    div r15 r16 into r17;
    add r13 r17 into r18;
    cast 97i128 into r19 as field;
    mul r19 r7 into r20;
    cast 128i128 into r21 as field;
    div r20 r21 into r22;
    add r18 r22 into r23;
    cast 14i128 into r24 as field;
    mul r24 r8 into r25;
    cast 128i128 into r26 as field;
    div r25 r26 into r27;
    add r23 r27 into r28;
    cast -100i128 into r29 as field;
    mul r29 r9 into r30;
    cast 128i128 into r31 as field;
    div r30 r31 into r32;
    add r28 r32 into r33;
    cast 100i128 into r34 as field;
    add r33 r34 into r35;
    call relu r35 into r36;
    cast 45i128 into r37 as field;
    mul r37 r5 into r38;
    cast 128i128 into r39 as field;
    div r38 r39 into r40;
    cast 30i128 into r41 as field;
    mul r41 r6 into r42;
    cast 128i128 into r43 as field;
    div r42 r43 into r44;
    add r40 r44 into r45;
    cast -24i128 into r46 as field;
    mul r46 r7 into r47;
    cast 128i128 into r48 as field;
    div r47 r48 into r49;
    add r45 r49 into r50;
    cast 89i128 into r51 as field;
    mul r51 r8 into r52;
    cast 128i128 into r53 as field;
    div r52 r53 into r54;
    add r50 r54 into r55;
    cast 69i128 into r56 as field;
    mul r56 r9 into r57;
    cast 128i128 into r58 as field;
    div r57 r58 into r59;
    add r55 r59 into r60;
    cast 63i128 into r61 as field;
    add r60 r61 into r62;
    call relu r62 into r63;
    cast 21i128 into r64 as field;
    mul r64 r5 into r65;
    cast 128i128 into r66 as field;
    div r65 r66 into r67;
    cast -13i128 into r68 as field;
    mul r68 r6 into r69;
    cast 128i128 into r70 as field;
    div r69 r70 into r71;
    add r67 r71 into r72;
    cast 61i128 into r73 as field;
    mul r73 r7 into r74;
    cast 128i128 into r75 as field;
    div r74 r75 into r76;
    add r72 r76 into r77;
    cast -90i128 into r78 as field;
    mul r78 r8 into r79;
    cast 128i128 into r80 as field;
    div r79 r80 into r81;
    add r77 r81 into r82;
    cast 58i128 into r83 as field;
    mul r83 r9 into r84;
    cast 128i128 into r85 as field;
    div r84 r85 into r86;
    add r82 r86 into r87;
    cast -8i128 into r88 as field;
    add r87 r88 into r89;
    call relu r89 into r90;
    cast 9i128 into r91 as field;
    mul r91 r5 into r92;
    cast 128i128 into r93 as field;
    div r92 r93 into r94;
    cast 82i128 into r95 as field;
    mul r95 r6 into r96;
    cast 128i128 into r97 as field;
    div r96 r97 into r98;
    add r94 r98 into r99;
    cast 6i128 into r100 as field;
    mul r100 r7 into r101;
    cast 128i128 into r102 as field;
    div r101 r102 into r103;
    add r99 r103 into r104;
    cast -86i128 into r105 as field;
    mul r105 r8 into r106;
    cast 128i128 into r107 as field;
    div r106 r107 into r108;
    add r104 r108 into r109;
    cast 77i128 into r110 as field;
    mul r110 r9 into r111;
    cast 128i128 into r112 as field;
    div r111 r112 into r113;
    add r109 r113 into r114;
    cast 59i128 into r115 as field;
    add r114 r115 into r116;
    call relu r116 into r117;
    cast -90i128 into r118 as field;
    mul r118 r36 into r119;
    cast 128i128 into r120 as field;
    div r119 r120 into r121;
    cast -90i32 into r122 as field;
    cast r121 into r123 as i128;
    cast r122 into r124 as i32;
    cast r36 into r125 as i128;
    output r123 as i128.private;
    output r124 as i32.private;
    output r125 as i128.private;
