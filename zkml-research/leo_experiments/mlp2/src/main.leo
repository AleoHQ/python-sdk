// This file was automatically generated by the zkml LeoTranspiler.
program mlp2.aleo {
    
    transition main (x0: i128, x1: i128, x2: i128, x3: i128, x4: i128) -> (i128, i32, i128) {
        let x0_field: field = x0 as field;
        let x1_field: field = x1 as field;
        let x2_field: field = x2 as field;
        let x3_field: field = x3 as field;
        let x4_field: field = x4 as field;
        let neuron_1_0: field = relu((10i128 as field)*x0_field/(128i128 as field) + (-16i128 as field)*x1_field/(128i128 as field) + (97i128 as field)*x2_field/(128i128 as field) + (14i128 as field)*x3_field/(128i128 as field) + (-100i128 as field)*x4_field/(128i128 as field) + (100i128 as field));
        let neuron_1_1: field = relu((45i128 as field)*x0_field/(128i128 as field) + (30i128 as field)*x1_field/(128i128 as field) + (-24i128 as field)*x2_field/(128i128 as field) + (89i128 as field)*x3_field/(128i128 as field) + (69i128 as field)*x4_field/(128i128 as field) + (63i128 as field));
        let neuron_1_2: field = relu((21i128 as field)*x0_field/(128i128 as field) + (-13i128 as field)*x1_field/(128i128 as field) + (61i128 as field)*x2_field/(128i128 as field) + (-90i128 as field)*x3_field/(128i128 as field) + (58i128 as field)*x4_field/(128i128 as field) + (-8i128 as field));
        let neuron_1_3: field = relu((9i128 as field)*x0_field/(128i128 as field) + (82i128 as field)*x1_field/(128i128 as field) + (6i128 as field)*x2_field/(128i128 as field) + (-86i128 as field)*x3_field/(128i128 as field) + (77i128 as field)*x4_field/(128i128 as field) + (59i128 as field));
        let output_0_field : field = (-90i128 as field)*neuron_1_0/(128i128 as field);
        let output_1_field : field = (-90i32 as field);
        let output_2_field : field = neuron_1_0;
        return (output_0_field as i128, output_1_field as i32, output_2_field as i128);
    }
                function relu(x: field) -> field {
        let x_integer: i32 = x as i32;
        if x_integer < 0i32 {
            return 0field;
        } else {
            return x_integer as field;
        }
    }
}